# frozen_string_literal: true

require "test_helper"
require "claude_swarm/claude_mcp_server"
require "tmpdir"
require "fileutils"
require "stringio"

class ClaudeMcpServerTest < Minitest::Test
  def setup
    @tmpdir = Dir.mktmpdir
    @original_dir = Dir.pwd
    Dir.chdir(@tmpdir)

    @instance_config = {
      name: "test_instance",
      directory: @tmpdir,
      model: "sonnet",
      prompt: "Test prompt",
      tools: %w[Read Edit],
      mcp_config_path: nil
    }

    # Reset class variables
    ClaudeSwarm::ClaudeMcpServer.executor = nil
    ClaudeSwarm::ClaudeMcpServer.instance_config = nil
    ClaudeSwarm::ClaudeMcpServer.logger = nil
    ClaudeSwarm::ClaudeMcpServer.session_timestamp = nil

    # Clear environment
    @original_env = ENV.fetch("CLAUDE_SWARM_SESSION_TIMESTAMP", nil)
    ENV.delete("CLAUDE_SWARM_SESSION_TIMESTAMP")
  end

  def teardown
    Dir.chdir(@original_dir)
    FileUtils.rm_rf(@tmpdir)
    ENV["CLAUDE_SWARM_SESSION_TIMESTAMP"] = @original_env if @original_env
  end

  def test_initialization
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    # Check class variables are set
    assert ClaudeSwarm::ClaudeMcpServer.executor
    assert_equal @instance_config, ClaudeSwarm::ClaudeMcpServer.instance_config
    assert ClaudeSwarm::ClaudeMcpServer.logger
  end

  def test_logging_setup_creates_directory
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    sessions_dir = File.join(@tmpdir, ".claude-swarm", "sessions")

    assert Dir.exist?(sessions_dir)
  end

  def test_logging_with_environment_timestamp
    ENV["CLAUDE_SWARM_SESSION_TIMESTAMP"] = "20240101_120000"
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    assert_equal "20240101_120000", ClaudeSwarm::ClaudeMcpServer.session_timestamp

    log_file = File.join(@tmpdir, ".claude-swarm", "sessions", "20240101_120000", "session.log")

    assert_path_exists log_file

    log_content = File.read(log_file)

    assert_match(/Started MCP server for instance: test_instance/, log_content)
  end

  def test_logging_without_environment_timestamp
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    timestamp = ClaudeSwarm::ClaudeMcpServer.session_timestamp

    assert_match(/^\d{8}_\d{6}$/, timestamp)

    log_file = File.join(@tmpdir, ".claude-swarm", "sessions", timestamp, "session.log")

    assert_path_exists log_file
  end

  def test_start_method
    server = ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    # Mock FastMcp::Server
    mock_server = Minitest::Mock.new
    mock_server.expect :register_tool, nil, [ClaudeSwarm::ClaudeMcpServer::TaskTool]
    mock_server.expect :register_tool, nil, [ClaudeSwarm::ClaudeMcpServer::SessionInfoTool]
    mock_server.expect :register_tool, nil, [ClaudeSwarm::ClaudeMcpServer::ResetSessionTool]
    mock_server.expect :start, nil

    FastMcp::Server.stub :new, mock_server do
      server.start
    end

    mock_server.verify
  end

  def test_task_tool_basic
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    # Mock executor
    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, {
      "result" => "Task completed successfully",
      "cost_usd" => 0.01,
      "duration_ms" => 1000,
      "is_error" => false,
      "total_cost" => 0.01
    }, ["Test task", { new_session: false, system_prompt: "Test prompt", allowed_tools: %w[Read Edit] }]
    mock_executor.expect :session_id, "test-session-1"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    result = tool.call(prompt: "Test task")

    assert_equal "Task completed successfully", result
    mock_executor.verify
  end

  def test_task_tool_with_new_session
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, {
      "result" => "New session started",
      "cost_usd" => 0.02,
      "duration_ms" => 1500,
      "is_error" => false,
      "total_cost" => 0.02
    }, ["Start fresh", { new_session: true, system_prompt: "Test prompt", allowed_tools: %w[Read Edit] }]
    mock_executor.expect :session_id, "test-session-2"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    result = tool.call(prompt: "Start fresh", new_session: true)

    assert_equal "New session started", result
    mock_executor.verify
  end

  def test_task_tool_with_custom_system_prompt
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, {
      "result" => "Custom prompt used",
      "cost_usd" => 0.01,
      "duration_ms" => 800,
      "is_error" => false,
      "total_cost" => 0.01
    }, ["Do something", { new_session: false, system_prompt: "Custom prompt", allowed_tools: %w[Read Edit] }]
    mock_executor.expect :session_id, "test-session-1"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    result = tool.call(prompt: "Do something", system_prompt: "Custom prompt")

    assert_equal "Custom prompt used", result
    mock_executor.verify
  end

  def test_task_tool_execution_error
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, nil do |*_args|
      raise ClaudeSwarm::ClaudeCodeExecutor::ExecutionError, "Claude failed"
    end

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    error = assert_raises(StandardError) do
      tool.call(prompt: "Fail task")
    end

    assert_equal "Execution failed: Claude failed", error.message
  end

  def test_task_tool_parse_error
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, nil do |*_args|
      raise ClaudeSwarm::ClaudeCodeExecutor::ParseError, "Invalid JSON"
    end

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    error = assert_raises(StandardError) do
      tool.call(prompt: "Parse fail")
    end

    assert_equal "Parse error: Invalid JSON", error.message
  end

  def test_task_tool_unexpected_error
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, nil do |*_args|
      raise "Something went wrong"
    end

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    error = assert_raises(StandardError) do
      tool.call(prompt: "Unexpected fail")
    end

    assert_equal "Unexpected error: Something went wrong", error.message
  end

  def test_task_tool_logging
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, {
      "result" => "Logged task",
      "cost_usd" => 0.01,
      "duration_ms" => 500,
      "is_error" => false,
      "total_cost" => 0.01
    }, [String, Hash]
    mock_executor.expect :session_id, "test-session-1"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    tool.call(prompt: "Log this task")

    # Check log file
    log_files = find_log_files

    assert_predicate log_files, :any?, "Expected to find log files"
    log_content = File.read(log_files.first)

    assert_match(/REQUEST:/, log_content)
    assert_match(/"prompt": "Log this task"/, log_content)
    assert_match(/RESPONSE:/, log_content)
    assert_match(/"result": "Logged task"/, log_content)
    assert_match(/"cost_usd": 0.01/, log_content)
  end

  def test_session_info_tool
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :has_session?, true
    mock_executor.expect :session_id, "test-session-123"
    mock_executor.expect :working_directory, "/test/dir"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::SessionInfoTool.new
    result = tool.call

    assert_equal({
                   has_session: true,
                   session_id: "test-session-123",
                   working_directory: "/test/dir"
                 }, result)

    mock_executor.verify
  end

  def test_reset_session_tool
    ClaudeSwarm::ClaudeMcpServer.new(@instance_config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :reset_session, nil

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::ResetSessionTool.new
    result = tool.call

    assert_equal({
                   success: true,
                   message: "Session has been reset"
                 }, result)

    mock_executor.verify
  end

  def test_instance_config_without_tools
    config = @instance_config.dup
    config[:allowed_tools] = nil

    ClaudeSwarm::ClaudeMcpServer.new(config)

    mock_executor = Minitest::Mock.new
    mock_executor.expect :session_id, "test-session-1"
    mock_executor.expect :execute, {
      "result" => "No tools specified",
      "cost_usd" => 0.01,
      "duration_ms" => 500,
      "is_error" => false,
      "total_cost" => 0.01
    }, ["Test", { new_session: false, system_prompt: "Test prompt" }] # No allowed_tools
    mock_executor.expect :session_id, "test-session-1"

    ClaudeSwarm::ClaudeMcpServer.executor = mock_executor

    tool = ClaudeSwarm::ClaudeMcpServer::TaskTool.new
    result = tool.call(prompt: "Test")

    assert_equal "No tools specified", result
    mock_executor.verify
  end

  def test_tool_descriptions
    assert_equal "Execute a task using Claude Code", ClaudeSwarm::ClaudeMcpServer::TaskTool.description
    assert_equal "Get information about the current Claude session", ClaudeSwarm::ClaudeMcpServer::SessionInfoTool.description
    assert_equal "Reset the Claude session, starting fresh on the next task", ClaudeSwarm::ClaudeMcpServer::ResetSessionTool.description
  end

  def test_tool_names
    assert_equal "task", ClaudeSwarm::ClaudeMcpServer::TaskTool.tool_name
    assert_equal "session_info", ClaudeSwarm::ClaudeMcpServer::SessionInfoTool.tool_name
    assert_equal "reset_session", ClaudeSwarm::ClaudeMcpServer::ResetSessionTool.tool_name
  end
end
